// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.29.1
// 	protoc        (unknown)
// source: bettor/v1alpha/bettor.proto

package bettorv1alpha

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Market_Status int32

const (
	Market_STATUS_UNSPECIFIED Market_Status = 0
	Market_STATUS_OPEN        Market_Status = 1
	Market_STATUS_BETS_LOCKED Market_Status = 2
	Market_STATUS_SETTLED     Market_Status = 3
	Market_STATUS_CANCELED    Market_Status = 4
)

// Enum value maps for Market_Status.
var (
	Market_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_OPEN",
		2: "STATUS_BETS_LOCKED",
		3: "STATUS_SETTLED",
		4: "STATUS_CANCELED",
	}
	Market_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"STATUS_OPEN":        1,
		"STATUS_BETS_LOCKED": 2,
		"STATUS_SETTLED":     3,
		"STATUS_CANCELED":    4,
	}
)

func (x Market_Status) Enum() *Market_Status {
	p := new(Market_Status)
	*p = x
	return p
}

func (x Market_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Market_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_bettor_v1alpha_bettor_proto_enumTypes[0].Descriptor()
}

func (Market_Status) Type() protoreflect.EnumType {
	return &file_bettor_v1alpha_bettor_proto_enumTypes[0]
}

func (x Market_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Market_Status.Descriptor instead.
func (Market_Status) EnumDescriptor() ([]byte, []int) {
	return file_bettor_v1alpha_bettor_proto_rawDescGZIP(), []int{1, 0}
}

// User information.
type User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                 string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	CreatedAt            *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt            *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	Username             string                 `protobuf:"bytes,4,opt,name=username,proto3" json:"username,omitempty"`
	Centipoints          uint64                 `protobuf:"varint,5,opt,name=centipoints,proto3" json:"centipoints,omitempty"`
	UnsettledCentipoints uint64                 `protobuf:"varint,6,opt,name=unsettled_centipoints,json=unsettledCentipoints,proto3" json:"unsettled_centipoints,omitempty"` // virtual field hydrated on read
}

func (x *User) Reset() {
	*x = User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bettor_v1alpha_bettor_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_bettor_v1alpha_bettor_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_bettor_v1alpha_bettor_proto_rawDescGZIP(), []int{0}
}

func (x *User) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *User) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *User) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *User) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *User) GetCentipoints() uint64 {
	if x != nil {
		return x.Centipoints
	}
	return 0
}

func (x *User) GetUnsettledCentipoints() uint64 {
	if x != nil {
		return x.UnsettledCentipoints
	}
	return 0
}

// A betting market.
type Market struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	SettledAt *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=settled_at,json=settledAt,proto3" json:"settled_at,omitempty"`
	Title     string                 `protobuf:"bytes,5,opt,name=title,proto3" json:"title,omitempty"`
	Creator   string                 `protobuf:"bytes,6,opt,name=creator,proto3" json:"creator,omitempty"`
	Status    Market_Status          `protobuf:"varint,7,opt,name=status,proto3,enum=bettor.v1alpha.Market_Status" json:"status,omitempty"`
	// Types that are assignable to Type:
	//
	//	*Market_Pool
	Type isMarket_Type `protobuf_oneof:"type"`
}

func (x *Market) Reset() {
	*x = Market{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bettor_v1alpha_bettor_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Market) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Market) ProtoMessage() {}

func (x *Market) ProtoReflect() protoreflect.Message {
	mi := &file_bettor_v1alpha_bettor_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Market.ProtoReflect.Descriptor instead.
func (*Market) Descriptor() ([]byte, []int) {
	return file_bettor_v1alpha_bettor_proto_rawDescGZIP(), []int{1}
}

func (x *Market) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Market) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Market) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *Market) GetSettledAt() *timestamppb.Timestamp {
	if x != nil {
		return x.SettledAt
	}
	return nil
}

func (x *Market) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Market) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *Market) GetStatus() Market_Status {
	if x != nil {
		return x.Status
	}
	return Market_STATUS_UNSPECIFIED
}

func (m *Market) GetType() isMarket_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *Market) GetPool() *Pool {
	if x, ok := x.GetType().(*Market_Pool); ok {
		return x.Pool
	}
	return nil
}

type isMarket_Type interface {
	isMarket_Type()
}

type Market_Pool struct {
	Pool *Pool `protobuf:"bytes,8,opt,name=pool,proto3,oneof"`
}

func (*Market_Pool) isMarket_Type() {}

// Pool or parimutuel betting market.
type Pool struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Outcomes []*Outcome `protobuf:"bytes,1,rep,name=outcomes,proto3" json:"outcomes,omitempty"`
	Winner   string     `protobuf:"bytes,2,opt,name=winner,proto3" json:"winner,omitempty"`
}

func (x *Pool) Reset() {
	*x = Pool{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bettor_v1alpha_bettor_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pool) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pool) ProtoMessage() {}

func (x *Pool) ProtoReflect() protoreflect.Message {
	mi := &file_bettor_v1alpha_bettor_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pool.ProtoReflect.Descriptor instead.
func (*Pool) Descriptor() ([]byte, []int) {
	return file_bettor_v1alpha_bettor_proto_rawDescGZIP(), []int{2}
}

func (x *Pool) GetOutcomes() []*Outcome {
	if x != nil {
		return x.Outcomes
	}
	return nil
}

func (x *Pool) GetWinner() string {
	if x != nil {
		return x.Winner
	}
	return ""
}

// An outcome in a pool betting market.
type Outcome struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Title       string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Centipoints uint64 `protobuf:"varint,3,opt,name=centipoints,proto3" json:"centipoints,omitempty"`
}

func (x *Outcome) Reset() {
	*x = Outcome{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bettor_v1alpha_bettor_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Outcome) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Outcome) ProtoMessage() {}

func (x *Outcome) ProtoReflect() protoreflect.Message {
	mi := &file_bettor_v1alpha_bettor_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Outcome.ProtoReflect.Descriptor instead.
func (*Outcome) Descriptor() ([]byte, []int) {
	return file_bettor_v1alpha_bettor_proto_rawDescGZIP(), []int{3}
}

func (x *Outcome) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Outcome) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Outcome) GetCentipoints() uint64 {
	if x != nil {
		return x.Centipoints
	}
	return 0
}

// A user's bet on a betting market.
type Bet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name               string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	CreatedAt          *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt          *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	SettledAt          *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=settled_at,json=settledAt,proto3" json:"settled_at,omitempty"`
	User               string                 `protobuf:"bytes,5,opt,name=user,proto3" json:"user,omitempty"`
	Market             string                 `protobuf:"bytes,6,opt,name=market,proto3" json:"market,omitempty"`
	Centipoints        uint64                 `protobuf:"varint,7,opt,name=centipoints,proto3" json:"centipoints,omitempty"`
	SettledCentipoints uint64                 `protobuf:"varint,8,opt,name=settled_centipoints,json=settledCentipoints,proto3" json:"settled_centipoints,omitempty"`
	// Types that are assignable to Type:
	//
	//	*Bet_Outcome
	Type isBet_Type `protobuf_oneof:"type"`
}

func (x *Bet) Reset() {
	*x = Bet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bettor_v1alpha_bettor_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bet) ProtoMessage() {}

func (x *Bet) ProtoReflect() protoreflect.Message {
	mi := &file_bettor_v1alpha_bettor_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bet.ProtoReflect.Descriptor instead.
func (*Bet) Descriptor() ([]byte, []int) {
	return file_bettor_v1alpha_bettor_proto_rawDescGZIP(), []int{4}
}

func (x *Bet) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Bet) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Bet) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *Bet) GetSettledAt() *timestamppb.Timestamp {
	if x != nil {
		return x.SettledAt
	}
	return nil
}

func (x *Bet) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *Bet) GetMarket() string {
	if x != nil {
		return x.Market
	}
	return ""
}

func (x *Bet) GetCentipoints() uint64 {
	if x != nil {
		return x.Centipoints
	}
	return 0
}

func (x *Bet) GetSettledCentipoints() uint64 {
	if x != nil {
		return x.SettledCentipoints
	}
	return 0
}

func (m *Bet) GetType() isBet_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *Bet) GetOutcome() string {
	if x, ok := x.GetType().(*Bet_Outcome); ok {
		return x.Outcome
	}
	return ""
}

type isBet_Type interface {
	isBet_Type()
}

type Bet_Outcome struct {
	Outcome string `protobuf:"bytes,9,opt,name=outcome,proto3,oneof"`
}

func (*Bet_Outcome) isBet_Type() {}

type CreateUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Book string `protobuf:"bytes,1,opt,name=book,proto3" json:"book,omitempty"`
	User *User  `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
}

func (x *CreateUserRequest) Reset() {
	*x = CreateUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bettor_v1alpha_bettor_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateUserRequest) ProtoMessage() {}

func (x *CreateUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bettor_v1alpha_bettor_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateUserRequest.ProtoReflect.Descriptor instead.
func (*CreateUserRequest) Descriptor() ([]byte, []int) {
	return file_bettor_v1alpha_bettor_proto_rawDescGZIP(), []int{5}
}

func (x *CreateUserRequest) GetBook() string {
	if x != nil {
		return x.Book
	}
	return ""
}

func (x *CreateUserRequest) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

type CreateUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User *User `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
}

func (x *CreateUserResponse) Reset() {
	*x = CreateUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bettor_v1alpha_bettor_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateUserResponse) ProtoMessage() {}

func (x *CreateUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bettor_v1alpha_bettor_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateUserResponse.ProtoReflect.Descriptor instead.
func (*CreateUserResponse) Descriptor() ([]byte, []int) {
	return file_bettor_v1alpha_bettor_proto_rawDescGZIP(), []int{6}
}

func (x *CreateUserResponse) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

type GetUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetUserRequest) Reset() {
	*x = GetUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bettor_v1alpha_bettor_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserRequest) ProtoMessage() {}

func (x *GetUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bettor_v1alpha_bettor_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserRequest.ProtoReflect.Descriptor instead.
func (*GetUserRequest) Descriptor() ([]byte, []int) {
	return file_bettor_v1alpha_bettor_proto_rawDescGZIP(), []int{7}
}

func (x *GetUserRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User *User `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
}

func (x *GetUserResponse) Reset() {
	*x = GetUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bettor_v1alpha_bettor_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserResponse) ProtoMessage() {}

func (x *GetUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bettor_v1alpha_bettor_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserResponse.ProtoReflect.Descriptor instead.
func (*GetUserResponse) Descriptor() ([]byte, []int) {
	return file_bettor_v1alpha_bettor_proto_rawDescGZIP(), []int{8}
}

func (x *GetUserResponse) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

type GetUserByUsernameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Book     string `protobuf:"bytes,1,opt,name=book,proto3" json:"book,omitempty"`
	Username string `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
}

func (x *GetUserByUsernameRequest) Reset() {
	*x = GetUserByUsernameRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bettor_v1alpha_bettor_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserByUsernameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserByUsernameRequest) ProtoMessage() {}

func (x *GetUserByUsernameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bettor_v1alpha_bettor_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserByUsernameRequest.ProtoReflect.Descriptor instead.
func (*GetUserByUsernameRequest) Descriptor() ([]byte, []int) {
	return file_bettor_v1alpha_bettor_proto_rawDescGZIP(), []int{9}
}

func (x *GetUserByUsernameRequest) GetBook() string {
	if x != nil {
		return x.Book
	}
	return ""
}

func (x *GetUserByUsernameRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

type GetUserByUsernameResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User *User `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
}

func (x *GetUserByUsernameResponse) Reset() {
	*x = GetUserByUsernameResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bettor_v1alpha_bettor_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserByUsernameResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserByUsernameResponse) ProtoMessage() {}

func (x *GetUserByUsernameResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bettor_v1alpha_bettor_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserByUsernameResponse.ProtoReflect.Descriptor instead.
func (*GetUserByUsernameResponse) Descriptor() ([]byte, []int) {
	return file_bettor_v1alpha_bettor_proto_rawDescGZIP(), []int{10}
}

func (x *GetUserByUsernameResponse) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

type ListUsersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageSize  int32    `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	PageToken string   `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	Book      string   `protobuf:"bytes,3,opt,name=book,proto3" json:"book,omitempty"`
	Users     []string `protobuf:"bytes,4,rep,name=users,proto3" json:"users,omitempty"`
	// valid options: "name" asc (default), "total_centipoints" desc
	OrderBy string `protobuf:"bytes,5,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
}

func (x *ListUsersRequest) Reset() {
	*x = ListUsersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bettor_v1alpha_bettor_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListUsersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUsersRequest) ProtoMessage() {}

func (x *ListUsersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bettor_v1alpha_bettor_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUsersRequest.ProtoReflect.Descriptor instead.
func (*ListUsersRequest) Descriptor() ([]byte, []int) {
	return file_bettor_v1alpha_bettor_proto_rawDescGZIP(), []int{11}
}

func (x *ListUsersRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListUsersRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListUsersRequest) GetBook() string {
	if x != nil {
		return x.Book
	}
	return ""
}

func (x *ListUsersRequest) GetUsers() []string {
	if x != nil {
		return x.Users
	}
	return nil
}

func (x *ListUsersRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

type ListUsersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Users         []*User `protobuf:"bytes,1,rep,name=users,proto3" json:"users,omitempty"`
	NextPageToken string  `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListUsersResponse) Reset() {
	*x = ListUsersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bettor_v1alpha_bettor_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListUsersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUsersResponse) ProtoMessage() {}

func (x *ListUsersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bettor_v1alpha_bettor_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUsersResponse.ProtoReflect.Descriptor instead.
func (*ListUsersResponse) Descriptor() ([]byte, []int) {
	return file_bettor_v1alpha_bettor_proto_rawDescGZIP(), []int{12}
}

func (x *ListUsersResponse) GetUsers() []*User {
	if x != nil {
		return x.Users
	}
	return nil
}

func (x *ListUsersResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type CreateMarketRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Book   string  `protobuf:"bytes,1,opt,name=book,proto3" json:"book,omitempty"`
	Market *Market `protobuf:"bytes,2,opt,name=market,proto3" json:"market,omitempty"`
}

func (x *CreateMarketRequest) Reset() {
	*x = CreateMarketRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bettor_v1alpha_bettor_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateMarketRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMarketRequest) ProtoMessage() {}

func (x *CreateMarketRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bettor_v1alpha_bettor_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMarketRequest.ProtoReflect.Descriptor instead.
func (*CreateMarketRequest) Descriptor() ([]byte, []int) {
	return file_bettor_v1alpha_bettor_proto_rawDescGZIP(), []int{13}
}

func (x *CreateMarketRequest) GetBook() string {
	if x != nil {
		return x.Book
	}
	return ""
}

func (x *CreateMarketRequest) GetMarket() *Market {
	if x != nil {
		return x.Market
	}
	return nil
}

type CreateMarketResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Market *Market `protobuf:"bytes,1,opt,name=market,proto3" json:"market,omitempty"`
}

func (x *CreateMarketResponse) Reset() {
	*x = CreateMarketResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bettor_v1alpha_bettor_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateMarketResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMarketResponse) ProtoMessage() {}

func (x *CreateMarketResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bettor_v1alpha_bettor_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMarketResponse.ProtoReflect.Descriptor instead.
func (*CreateMarketResponse) Descriptor() ([]byte, []int) {
	return file_bettor_v1alpha_bettor_proto_rawDescGZIP(), []int{14}
}

func (x *CreateMarketResponse) GetMarket() *Market {
	if x != nil {
		return x.Market
	}
	return nil
}

type GetMarketRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetMarketRequest) Reset() {
	*x = GetMarketRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bettor_v1alpha_bettor_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMarketRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMarketRequest) ProtoMessage() {}

func (x *GetMarketRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bettor_v1alpha_bettor_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMarketRequest.ProtoReflect.Descriptor instead.
func (*GetMarketRequest) Descriptor() ([]byte, []int) {
	return file_bettor_v1alpha_bettor_proto_rawDescGZIP(), []int{15}
}

func (x *GetMarketRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetMarketResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Market *Market `protobuf:"bytes,1,opt,name=market,proto3" json:"market,omitempty"`
}

func (x *GetMarketResponse) Reset() {
	*x = GetMarketResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bettor_v1alpha_bettor_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMarketResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMarketResponse) ProtoMessage() {}

func (x *GetMarketResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bettor_v1alpha_bettor_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMarketResponse.ProtoReflect.Descriptor instead.
func (*GetMarketResponse) Descriptor() ([]byte, []int) {
	return file_bettor_v1alpha_bettor_proto_rawDescGZIP(), []int{16}
}

func (x *GetMarketResponse) GetMarket() *Market {
	if x != nil {
		return x.Market
	}
	return nil
}

type ListMarketsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageSize  int32         `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	PageToken string        `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	Book      string        `protobuf:"bytes,3,opt,name=book,proto3" json:"book,omitempty"`
	Status    Market_Status `protobuf:"varint,4,opt,name=status,proto3,enum=bettor.v1alpha.Market_Status" json:"status,omitempty"`
}

func (x *ListMarketsRequest) Reset() {
	*x = ListMarketsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bettor_v1alpha_bettor_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListMarketsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMarketsRequest) ProtoMessage() {}

func (x *ListMarketsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bettor_v1alpha_bettor_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMarketsRequest.ProtoReflect.Descriptor instead.
func (*ListMarketsRequest) Descriptor() ([]byte, []int) {
	return file_bettor_v1alpha_bettor_proto_rawDescGZIP(), []int{17}
}

func (x *ListMarketsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListMarketsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListMarketsRequest) GetBook() string {
	if x != nil {
		return x.Book
	}
	return ""
}

func (x *ListMarketsRequest) GetStatus() Market_Status {
	if x != nil {
		return x.Status
	}
	return Market_STATUS_UNSPECIFIED
}

type ListMarketsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Markets       []*Market `protobuf:"bytes,1,rep,name=markets,proto3" json:"markets,omitempty"`
	NextPageToken string    `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListMarketsResponse) Reset() {
	*x = ListMarketsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bettor_v1alpha_bettor_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListMarketsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMarketsResponse) ProtoMessage() {}

func (x *ListMarketsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bettor_v1alpha_bettor_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMarketsResponse.ProtoReflect.Descriptor instead.
func (*ListMarketsResponse) Descriptor() ([]byte, []int) {
	return file_bettor_v1alpha_bettor_proto_rawDescGZIP(), []int{18}
}

func (x *ListMarketsResponse) GetMarkets() []*Market {
	if x != nil {
		return x.Markets
	}
	return nil
}

func (x *ListMarketsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type LockMarketRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *LockMarketRequest) Reset() {
	*x = LockMarketRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bettor_v1alpha_bettor_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LockMarketRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LockMarketRequest) ProtoMessage() {}

func (x *LockMarketRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bettor_v1alpha_bettor_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LockMarketRequest.ProtoReflect.Descriptor instead.
func (*LockMarketRequest) Descriptor() ([]byte, []int) {
	return file_bettor_v1alpha_bettor_proto_rawDescGZIP(), []int{19}
}

func (x *LockMarketRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type LockMarketResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Market *Market `protobuf:"bytes,1,opt,name=market,proto3" json:"market,omitempty"`
}

func (x *LockMarketResponse) Reset() {
	*x = LockMarketResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bettor_v1alpha_bettor_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LockMarketResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LockMarketResponse) ProtoMessage() {}

func (x *LockMarketResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bettor_v1alpha_bettor_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LockMarketResponse.ProtoReflect.Descriptor instead.
func (*LockMarketResponse) Descriptor() ([]byte, []int) {
	return file_bettor_v1alpha_bettor_proto_rawDescGZIP(), []int{20}
}

func (x *LockMarketResponse) GetMarket() *Market {
	if x != nil {
		return x.Market
	}
	return nil
}

type SettleMarketRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Types that are assignable to Type:
	//
	//	*SettleMarketRequest_Winner
	Type isSettleMarketRequest_Type `protobuf_oneof:"type"`
}

func (x *SettleMarketRequest) Reset() {
	*x = SettleMarketRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bettor_v1alpha_bettor_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SettleMarketRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SettleMarketRequest) ProtoMessage() {}

func (x *SettleMarketRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bettor_v1alpha_bettor_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SettleMarketRequest.ProtoReflect.Descriptor instead.
func (*SettleMarketRequest) Descriptor() ([]byte, []int) {
	return file_bettor_v1alpha_bettor_proto_rawDescGZIP(), []int{21}
}

func (x *SettleMarketRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (m *SettleMarketRequest) GetType() isSettleMarketRequest_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *SettleMarketRequest) GetWinner() string {
	if x, ok := x.GetType().(*SettleMarketRequest_Winner); ok {
		return x.Winner
	}
	return ""
}

type isSettleMarketRequest_Type interface {
	isSettleMarketRequest_Type()
}

type SettleMarketRequest_Winner struct {
	Winner string `protobuf:"bytes,2,opt,name=winner,proto3,oneof"`
}

func (*SettleMarketRequest_Winner) isSettleMarketRequest_Type() {}

type SettleMarketResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Market *Market `protobuf:"bytes,1,opt,name=market,proto3" json:"market,omitempty"`
}

func (x *SettleMarketResponse) Reset() {
	*x = SettleMarketResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bettor_v1alpha_bettor_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SettleMarketResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SettleMarketResponse) ProtoMessage() {}

func (x *SettleMarketResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bettor_v1alpha_bettor_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SettleMarketResponse.ProtoReflect.Descriptor instead.
func (*SettleMarketResponse) Descriptor() ([]byte, []int) {
	return file_bettor_v1alpha_bettor_proto_rawDescGZIP(), []int{22}
}

func (x *SettleMarketResponse) GetMarket() *Market {
	if x != nil {
		return x.Market
	}
	return nil
}

type CancelMarketRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *CancelMarketRequest) Reset() {
	*x = CancelMarketRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bettor_v1alpha_bettor_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelMarketRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelMarketRequest) ProtoMessage() {}

func (x *CancelMarketRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bettor_v1alpha_bettor_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelMarketRequest.ProtoReflect.Descriptor instead.
func (*CancelMarketRequest) Descriptor() ([]byte, []int) {
	return file_bettor_v1alpha_bettor_proto_rawDescGZIP(), []int{23}
}

func (x *CancelMarketRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type CancelMarketResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Market *Market `protobuf:"bytes,1,opt,name=market,proto3" json:"market,omitempty"`
}

func (x *CancelMarketResponse) Reset() {
	*x = CancelMarketResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bettor_v1alpha_bettor_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelMarketResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelMarketResponse) ProtoMessage() {}

func (x *CancelMarketResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bettor_v1alpha_bettor_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelMarketResponse.ProtoReflect.Descriptor instead.
func (*CancelMarketResponse) Descriptor() ([]byte, []int) {
	return file_bettor_v1alpha_bettor_proto_rawDescGZIP(), []int{24}
}

func (x *CancelMarketResponse) GetMarket() *Market {
	if x != nil {
		return x.Market
	}
	return nil
}

type CreateBetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Book string `protobuf:"bytes,1,opt,name=book,proto3" json:"book,omitempty"`
	Bet  *Bet   `protobuf:"bytes,2,opt,name=bet,proto3" json:"bet,omitempty"`
}

func (x *CreateBetRequest) Reset() {
	*x = CreateBetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bettor_v1alpha_bettor_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBetRequest) ProtoMessage() {}

func (x *CreateBetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bettor_v1alpha_bettor_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBetRequest.ProtoReflect.Descriptor instead.
func (*CreateBetRequest) Descriptor() ([]byte, []int) {
	return file_bettor_v1alpha_bettor_proto_rawDescGZIP(), []int{25}
}

func (x *CreateBetRequest) GetBook() string {
	if x != nil {
		return x.Book
	}
	return ""
}

func (x *CreateBetRequest) GetBet() *Bet {
	if x != nil {
		return x.Bet
	}
	return nil
}

type CreateBetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bet *Bet `protobuf:"bytes,1,opt,name=bet,proto3" json:"bet,omitempty"`
}

func (x *CreateBetResponse) Reset() {
	*x = CreateBetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bettor_v1alpha_bettor_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBetResponse) ProtoMessage() {}

func (x *CreateBetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bettor_v1alpha_bettor_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBetResponse.ProtoReflect.Descriptor instead.
func (*CreateBetResponse) Descriptor() ([]byte, []int) {
	return file_bettor_v1alpha_bettor_proto_rawDescGZIP(), []int{26}
}

func (x *CreateBetResponse) GetBet() *Bet {
	if x != nil {
		return x.Bet
	}
	return nil
}

type GetBetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bet string `protobuf:"bytes,1,opt,name=bet,proto3" json:"bet,omitempty"`
}

func (x *GetBetRequest) Reset() {
	*x = GetBetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bettor_v1alpha_bettor_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBetRequest) ProtoMessage() {}

func (x *GetBetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bettor_v1alpha_bettor_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBetRequest.ProtoReflect.Descriptor instead.
func (*GetBetRequest) Descriptor() ([]byte, []int) {
	return file_bettor_v1alpha_bettor_proto_rawDescGZIP(), []int{27}
}

func (x *GetBetRequest) GetBet() string {
	if x != nil {
		return x.Bet
	}
	return ""
}

type GetBetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bet *Bet `protobuf:"bytes,1,opt,name=bet,proto3" json:"bet,omitempty"`
}

func (x *GetBetResponse) Reset() {
	*x = GetBetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bettor_v1alpha_bettor_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBetResponse) ProtoMessage() {}

func (x *GetBetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bettor_v1alpha_bettor_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBetResponse.ProtoReflect.Descriptor instead.
func (*GetBetResponse) Descriptor() ([]byte, []int) {
	return file_bettor_v1alpha_bettor_proto_rawDescGZIP(), []int{28}
}

func (x *GetBetResponse) GetBet() *Bet {
	if x != nil {
		return x.Bet
	}
	return nil
}

type ListBetsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageSize       int32  `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	PageToken      string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	Book           string `protobuf:"bytes,3,opt,name=book,proto3" json:"book,omitempty"`
	User           string `protobuf:"bytes,4,opt,name=user,proto3" json:"user,omitempty"`
	Market         string `protobuf:"bytes,5,opt,name=market,proto3" json:"market,omitempty"`
	ExcludeSettled bool   `protobuf:"varint,6,opt,name=exclude_settled,json=excludeSettled,proto3" json:"exclude_settled,omitempty"`
}

func (x *ListBetsRequest) Reset() {
	*x = ListBetsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bettor_v1alpha_bettor_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBetsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBetsRequest) ProtoMessage() {}

func (x *ListBetsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bettor_v1alpha_bettor_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBetsRequest.ProtoReflect.Descriptor instead.
func (*ListBetsRequest) Descriptor() ([]byte, []int) {
	return file_bettor_v1alpha_bettor_proto_rawDescGZIP(), []int{29}
}

func (x *ListBetsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListBetsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListBetsRequest) GetBook() string {
	if x != nil {
		return x.Book
	}
	return ""
}

func (x *ListBetsRequest) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *ListBetsRequest) GetMarket() string {
	if x != nil {
		return x.Market
	}
	return ""
}

func (x *ListBetsRequest) GetExcludeSettled() bool {
	if x != nil {
		return x.ExcludeSettled
	}
	return false
}

type ListBetsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bets          []*Bet `protobuf:"bytes,1,rep,name=bets,proto3" json:"bets,omitempty"`
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListBetsResponse) Reset() {
	*x = ListBetsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bettor_v1alpha_bettor_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBetsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBetsResponse) ProtoMessage() {}

func (x *ListBetsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bettor_v1alpha_bettor_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBetsResponse.ProtoReflect.Descriptor instead.
func (*ListBetsResponse) Descriptor() ([]byte, []int) {
	return file_bettor_v1alpha_bettor_proto_rawDescGZIP(), []int{30}
}

func (x *ListBetsResponse) GetBets() []*Bet {
	if x != nil {
		return x.Bets
	}
	return nil
}

func (x *ListBetsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

var File_bettor_v1alpha_bettor_proto protoreflect.FileDescriptor

var file_bettor_v1alpha_bettor_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x62, 0x65, 0x74, 0x74, 0x6f, 0x72, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2f, 0x62, 0x65, 0x74, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x62,
	0x65, 0x74, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x1a, 0x1f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe3, 0x02, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72,
	0x12, 0x41, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2d,
	0xfa, 0x42, 0x2a, 0x72, 0x28, 0x10, 0x01, 0x18, 0x80, 0x08, 0x32, 0x21, 0x5e, 0x62, 0x6f, 0x6f,
	0x6b, 0x73, 0x2f, 0x5b, 0x5e, 0x2f, 0x5d, 0x7b, 0x31, 0x2c, 0x33, 0x36, 0x7d, 0x2f, 0x75, 0x73,
	0x65, 0x72, 0x73, 0x2f, 0x5b, 0x5e, 0x2f, 0x5d, 0x7b, 0x33, 0x36, 0x7d, 0x24, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x42, 0x08, 0xfa, 0x42, 0x05, 0xb2, 0x01, 0x02, 0x08, 0x01, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x43, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x08, 0xfa, 0x42, 0x05, 0xb2, 0x01, 0x02,
	0x08, 0x01, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x37, 0x0a,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x1b, 0xfa, 0x42, 0x18, 0x72, 0x16, 0x10, 0x01, 0x18, 0x80, 0x01, 0x32, 0x0f, 0x5e, 0x5b, 0x61,
	0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5f, 0x5d, 0x2b, 0x24, 0x52, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x65, 0x6e, 0x74, 0x69, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x63, 0x65, 0x6e,
	0x74, 0x69, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x33, 0x0a, 0x15, 0x75, 0x6e, 0x73, 0x65,
	0x74, 0x74, 0x6c, 0x65, 0x64, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x69, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x75, 0x6e, 0x73, 0x65, 0x74, 0x74, 0x6c,
	0x65, 0x64, 0x43, 0x65, 0x6e, 0x74, 0x69, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x22, 0xc7, 0x04,
	0x0a, 0x06, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0x43, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2f, 0xfa, 0x42, 0x2c, 0x72, 0x2a, 0x10, 0x01, 0x18,
	0x80, 0x08, 0x32, 0x23, 0x5e, 0x62, 0x6f, 0x6f, 0x6b, 0x73, 0x2f, 0x5b, 0x5e, 0x2f, 0x5d, 0x7b,
	0x31, 0x2c, 0x33, 0x36, 0x7d, 0x2f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x2f, 0x5b, 0x5e,
	0x2f, 0x5d, 0x7b, 0x33, 0x36, 0x7d, 0x24, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x43, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x08, 0xfa,
	0x42, 0x05, 0xb2, 0x01, 0x02, 0x08, 0x01, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x43, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x42, 0x08, 0xfa, 0x42, 0x05, 0xb2, 0x01, 0x02, 0x08, 0x01, 0x52, 0x09, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x65, 0x74, 0x74, 0x6c,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x20, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0x80, 0x08, 0x52, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x12, 0x21, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x41, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x62, 0x65, 0x74, 0x74, 0x6f, 0x72,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x82, 0x01, 0x04, 0x10, 0x01,
	0x20, 0x00, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2a, 0x0a, 0x04, 0x70, 0x6f,
	0x6f, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x62, 0x65, 0x74, 0x74, 0x6f,
	0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x50, 0x6f, 0x6f, 0x6c, 0x48, 0x00,
	0x52, 0x04, 0x70, 0x6f, 0x6f, 0x6c, 0x22, 0x72, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x42, 0x45, 0x54, 0x53, 0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x10,
	0x02, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x45, 0x54, 0x54,
	0x4c, 0x45, 0x44, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x45, 0x44, 0x10, 0x04, 0x42, 0x0b, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x03, 0xf8, 0x42, 0x01, 0x22, 0x5f, 0x0a, 0x04, 0x50, 0x6f, 0x6f, 0x6c, 0x12,
	0x3f, 0x0a, 0x08, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x62, 0x65, 0x74, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x92,
	0x01, 0x04, 0x08, 0x02, 0x10, 0x63, 0x52, 0x08, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x77, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x77, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x22, 0xa5, 0x01, 0x0a, 0x07, 0x4f, 0x75, 0x74,
	0x63, 0x6f, 0x6d, 0x65, 0x12, 0x56, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x42, 0xfa, 0x42, 0x3f, 0x72, 0x3d, 0x10, 0x01, 0x18, 0x80, 0x08, 0x32, 0x36,
	0x5e, 0x62, 0x6f, 0x6f, 0x6b, 0x73, 0x2f, 0x5b, 0x5e, 0x2f, 0x5d, 0x7b, 0x31, 0x2c, 0x33, 0x36,
	0x7d, 0x2f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x2f, 0x5b, 0x5e, 0x2f, 0x5d, 0x7b, 0x33,
	0x36, 0x7d, 0x2f, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x73, 0x2f, 0x5b, 0x5e, 0x2f, 0x5d,
	0x7b, 0x31, 0x2c, 0x32, 0x7d, 0x24, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07,
	0x72, 0x05, 0x10, 0x01, 0x18, 0x80, 0x08, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x63, 0x65, 0x6e, 0x74, 0x69, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0b, 0x63, 0x65, 0x6e, 0x74, 0x69, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x22, 0xcf, 0x03, 0x0a, 0x03, 0x42, 0x65, 0x74, 0x12, 0x40, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2c, 0xfa, 0x42, 0x29, 0x72, 0x27, 0x10, 0x01, 0x18,
	0x80, 0x08, 0x32, 0x20, 0x5e, 0x62, 0x6f, 0x6f, 0x6b, 0x73, 0x2f, 0x5b, 0x5e, 0x2f, 0x5d, 0x7b,
	0x31, 0x2c, 0x33, 0x36, 0x7d, 0x2f, 0x62, 0x65, 0x74, 0x73, 0x2f, 0x5b, 0x5e, 0x2f, 0x5d, 0x7b,
	0x33, 0x36, 0x7d, 0x24, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x08, 0xfa, 0x42, 0x05, 0xb2,
	0x01, 0x02, 0x08, 0x01, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x43, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42,
	0x08, 0xfa, 0x42, 0x05, 0xb2, 0x01, 0x02, 0x08, 0x01, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x1b, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa,
	0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x06,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0x29, 0x0a,
	0x0b, 0x63, 0x65, 0x6e, 0x74, 0x69, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x04, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x32, 0x02, 0x20, 0x00, 0x52, 0x0b, 0x63, 0x65, 0x6e,
	0x74, 0x69, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x2f, 0x0a, 0x13, 0x73, 0x65, 0x74, 0x74,
	0x6c, 0x65, 0x64, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x69, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x64, 0x43, 0x65,
	0x6e, 0x74, 0x69, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x07, 0x6f, 0x75, 0x74,
	0x63, 0x6f, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x6f, 0x75,
	0x74, 0x63, 0x6f, 0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x03, 0xf8,
	0x42, 0x01, 0x22, 0x51, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f, 0x6f, 0x6b, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x62, 0x6f, 0x6f, 0x6b, 0x12, 0x28, 0x0a, 0x04, 0x75,
	0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x62, 0x65, 0x74, 0x74,
	0x6f, 0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x04, 0x75, 0x73, 0x65, 0x72, 0x22, 0x3e, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x04, 0x75,
	0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x62, 0x65, 0x74, 0x74,
	0x6f, 0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x04, 0x75, 0x73, 0x65, 0x72, 0x22, 0x2d, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0x3b, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x62, 0x65, 0x74, 0x74, 0x6f, 0x72, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65,
	0x72, 0x22, 0x5c, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x42, 0x79, 0x55, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a,
	0x04, 0x62, 0x6f, 0x6f, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x62, 0x6f, 0x6f, 0x6b, 0x12, 0x23, 0x0a, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0x45, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x04,
	0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x62, 0x65, 0x74,
	0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x22, 0xc7, 0x01, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x09, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x07,
	0xfa, 0x42, 0x04, 0x1a, 0x02, 0x18, 0x32, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x1b, 0x0a, 0x04, 0x62, 0x6f, 0x6f, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x62, 0x6f, 0x6f, 0x6b, 0x12, 0x14, 0x0a,
	0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x75, 0x73,
	0x65, 0x72, 0x73, 0x12, 0x3b, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0xfa, 0x42, 0x1d, 0x72, 0x1b, 0x52, 0x00, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x52, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x65, 0x6e, 0x74,
	0x69, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79,
	0x22, 0x67, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x62, 0x65, 0x74, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72,
	0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74,
	0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x59, 0x0a, 0x13, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f, 0x6f, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x62, 0x6f, 0x6f, 0x6b, 0x12, 0x2e, 0x0a, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x65, 0x74, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x06, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x22, 0x46, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x06,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62,
	0x65, 0x74, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x52, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x22, 0x2f, 0x0a, 0x10,
	0x47, 0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1b, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x43, 0x0a,
	0x11, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2e, 0x0a, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x65, 0x74, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x06, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x22, 0xad, 0x01, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x09, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x1a, 0x02, 0x18, 0x32, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1b,
	0x0a, 0x04, 0x62, 0x6f, 0x6f, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x62, 0x6f, 0x6f, 0x6b, 0x12, 0x35, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x62, 0x65,
	0x74, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0x6f, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x07, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x65, 0x74,
	0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x52, 0x07, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e,
	0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x22, 0x30, 0x0a, 0x11, 0x4c, 0x6f, 0x63, 0x6b, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x44, 0x0a, 0x12, 0x4c, 0x6f, 0x63, 0x6b, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x06, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x65,
	0x74, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x52, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x22, 0x59, 0x0a, 0x13, 0x53,
	0x65, 0x74, 0x74, 0x6c, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1b, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x18, 0x0a, 0x06, 0x77, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x06, 0x77, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x42, 0x0b, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x03, 0xf8, 0x42, 0x01, 0x22, 0x46, 0x0a, 0x14, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e,
	0x0a, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x62, 0x65, 0x74, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x22, 0x32,
	0x0a, 0x13, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x22, 0x46, 0x0a, 0x14, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x06, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x65, 0x74,
	0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x52, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x22, 0x4d, 0x0a, 0x10, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x42, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x62, 0x6f, 0x6f, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x62, 0x6f,
	0x6f, 0x6b, 0x12, 0x25, 0x0a, 0x03, 0x62, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x62, 0x65, 0x74, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x42, 0x65, 0x74, 0x52, 0x03, 0x62, 0x65, 0x74, 0x22, 0x3a, 0x0a, 0x11, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x42, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25,
	0x0a, 0x03, 0x62, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x65,
	0x74, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x42, 0x65, 0x74,
	0x52, 0x03, 0x62, 0x65, 0x74, 0x22, 0x2a, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x42, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x03, 0x62, 0x65, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x03, 0x62, 0x65,
	0x74, 0x22, 0x37, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x42, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x03, 0x62, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x62, 0x65, 0x74, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x42, 0x65, 0x74, 0x52, 0x03, 0x62, 0x65, 0x74, 0x22, 0xc8, 0x01, 0x0a, 0x0f, 0x4c,
	0x69, 0x73, 0x74, 0x42, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24,
	0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x1a, 0x02, 0x18, 0x32, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x1b, 0x0a, 0x04, 0x62, 0x6f, 0x6f, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x62, 0x6f, 0x6f, 0x6b,
	0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x75, 0x73, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0x27, 0x0a, 0x0f,
	0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x53, 0x65,
	0x74, 0x74, 0x6c, 0x65, 0x64, 0x22, 0x63, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x65, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x04, 0x62, 0x65, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x65, 0x74, 0x74, 0x6f, 0x72,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x42, 0x65, 0x74, 0x52, 0x04, 0x62, 0x65,
	0x74, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78,
	0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x32, 0x80, 0x09, 0x0a, 0x0d, 0x42,
	0x65, 0x74, 0x74, 0x6f, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x55, 0x0a, 0x0a,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x21, 0x2e, 0x62, 0x65, 0x74,
	0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e,
	0x62, 0x65, 0x74, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1e,
	0x2e, 0x62, 0x65, 0x74, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f,
	0x2e, 0x62, 0x65, 0x74, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x6a, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x42, 0x79, 0x55, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x2e, 0x62, 0x65, 0x74, 0x74, 0x6f, 0x72, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x42,
	0x79, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x29, 0x2e, 0x62, 0x65, 0x74, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x52, 0x0a,
	0x09, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x20, 0x2e, 0x62, 0x65, 0x74,
	0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x62,
	0x65, 0x74, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x5b, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x12, 0x23, 0x2e, 0x62, 0x65, 0x74, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x62, 0x65, 0x74, 0x74, 0x6f, 0x72, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x52,
	0x0a, 0x09, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0x20, 0x2e, 0x62, 0x65,
	0x74, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x47, 0x65, 0x74,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e,
	0x62, 0x65, 0x74, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x47,
	0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x58, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x73, 0x12, 0x22, 0x2e, 0x62, 0x65, 0x74, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x62, 0x65, 0x74, 0x74, 0x6f, 0x72, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x0a,
	0x4c, 0x6f, 0x63, 0x6b, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0x21, 0x2e, 0x62, 0x65, 0x74,
	0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4c, 0x6f, 0x63, 0x6b,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e,
	0x62, 0x65, 0x74, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4c,
	0x6f, 0x63, 0x6b, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x0c, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x12, 0x23, 0x2e, 0x62, 0x65, 0x74, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x62, 0x65, 0x74, 0x74, 0x6f,
	0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x5b, 0x0a, 0x0c, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x12, 0x23, 0x2e, 0x62, 0x65, 0x74, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x62, 0x65, 0x74, 0x74, 0x6f, 0x72, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x52, 0x0a,
	0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x65, 0x74, 0x12, 0x20, 0x2e, 0x62, 0x65, 0x74,
	0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x42, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x62,
	0x65, 0x74, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x42, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x49, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x42, 0x65, 0x74, 0x12, 0x1d, 0x2e, 0x62, 0x65,
	0x74, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x47, 0x65, 0x74,
	0x42, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x62, 0x65, 0x74,
	0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x42,
	0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x08,
	0x4c, 0x69, 0x73, 0x74, 0x42, 0x65, 0x74, 0x73, 0x12, 0x1f, 0x2e, 0x62, 0x65, 0x74, 0x74, 0x6f,
	0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x65,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x62, 0x65, 0x74, 0x74,
	0x6f, 0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42,
	0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0xb2, 0x01,
	0x0a, 0x12, 0x63, 0x6f, 0x6d, 0x2e, 0x62, 0x65, 0x74, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x42, 0x0b, 0x42, 0x65, 0x74, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x50, 0x01, 0x5a, 0x36, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x65, 0x6c, 0x68, 0x2f, 0x62, 0x65, 0x74, 0x74, 0x6f, 0x72, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x62,
	0x65, 0x74, 0x74, 0x6f, 0x72, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x3b, 0x62, 0x65,
	0x74, 0x74, 0x6f, 0x72, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0xa2, 0x02, 0x03, 0x42, 0x58,
	0x58, 0xaa, 0x02, 0x0e, 0x42, 0x65, 0x74, 0x74, 0x6f, 0x72, 0x2e, 0x56, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0xca, 0x02, 0x0e, 0x42, 0x65, 0x74, 0x74, 0x6f, 0x72, 0x5c, 0x56, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0xe2, 0x02, 0x1a, 0x42, 0x65, 0x74, 0x74, 0x6f, 0x72, 0x5c, 0x56, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0xea, 0x02, 0x0f, 0x42, 0x65, 0x74, 0x74, 0x6f, 0x72, 0x3a, 0x3a, 0x56, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_bettor_v1alpha_bettor_proto_rawDescOnce sync.Once
	file_bettor_v1alpha_bettor_proto_rawDescData = file_bettor_v1alpha_bettor_proto_rawDesc
)

func file_bettor_v1alpha_bettor_proto_rawDescGZIP() []byte {
	file_bettor_v1alpha_bettor_proto_rawDescOnce.Do(func() {
		file_bettor_v1alpha_bettor_proto_rawDescData = protoimpl.X.CompressGZIP(file_bettor_v1alpha_bettor_proto_rawDescData)
	})
	return file_bettor_v1alpha_bettor_proto_rawDescData
}

var file_bettor_v1alpha_bettor_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_bettor_v1alpha_bettor_proto_msgTypes = make([]protoimpl.MessageInfo, 31)
var file_bettor_v1alpha_bettor_proto_goTypes = []interface{}{
	(Market_Status)(0),                // 0: bettor.v1alpha.Market.Status
	(*User)(nil),                      // 1: bettor.v1alpha.User
	(*Market)(nil),                    // 2: bettor.v1alpha.Market
	(*Pool)(nil),                      // 3: bettor.v1alpha.Pool
	(*Outcome)(nil),                   // 4: bettor.v1alpha.Outcome
	(*Bet)(nil),                       // 5: bettor.v1alpha.Bet
	(*CreateUserRequest)(nil),         // 6: bettor.v1alpha.CreateUserRequest
	(*CreateUserResponse)(nil),        // 7: bettor.v1alpha.CreateUserResponse
	(*GetUserRequest)(nil),            // 8: bettor.v1alpha.GetUserRequest
	(*GetUserResponse)(nil),           // 9: bettor.v1alpha.GetUserResponse
	(*GetUserByUsernameRequest)(nil),  // 10: bettor.v1alpha.GetUserByUsernameRequest
	(*GetUserByUsernameResponse)(nil), // 11: bettor.v1alpha.GetUserByUsernameResponse
	(*ListUsersRequest)(nil),          // 12: bettor.v1alpha.ListUsersRequest
	(*ListUsersResponse)(nil),         // 13: bettor.v1alpha.ListUsersResponse
	(*CreateMarketRequest)(nil),       // 14: bettor.v1alpha.CreateMarketRequest
	(*CreateMarketResponse)(nil),      // 15: bettor.v1alpha.CreateMarketResponse
	(*GetMarketRequest)(nil),          // 16: bettor.v1alpha.GetMarketRequest
	(*GetMarketResponse)(nil),         // 17: bettor.v1alpha.GetMarketResponse
	(*ListMarketsRequest)(nil),        // 18: bettor.v1alpha.ListMarketsRequest
	(*ListMarketsResponse)(nil),       // 19: bettor.v1alpha.ListMarketsResponse
	(*LockMarketRequest)(nil),         // 20: bettor.v1alpha.LockMarketRequest
	(*LockMarketResponse)(nil),        // 21: bettor.v1alpha.LockMarketResponse
	(*SettleMarketRequest)(nil),       // 22: bettor.v1alpha.SettleMarketRequest
	(*SettleMarketResponse)(nil),      // 23: bettor.v1alpha.SettleMarketResponse
	(*CancelMarketRequest)(nil),       // 24: bettor.v1alpha.CancelMarketRequest
	(*CancelMarketResponse)(nil),      // 25: bettor.v1alpha.CancelMarketResponse
	(*CreateBetRequest)(nil),          // 26: bettor.v1alpha.CreateBetRequest
	(*CreateBetResponse)(nil),         // 27: bettor.v1alpha.CreateBetResponse
	(*GetBetRequest)(nil),             // 28: bettor.v1alpha.GetBetRequest
	(*GetBetResponse)(nil),            // 29: bettor.v1alpha.GetBetResponse
	(*ListBetsRequest)(nil),           // 30: bettor.v1alpha.ListBetsRequest
	(*ListBetsResponse)(nil),          // 31: bettor.v1alpha.ListBetsResponse
	(*timestamppb.Timestamp)(nil),     // 32: google.protobuf.Timestamp
}
var file_bettor_v1alpha_bettor_proto_depIdxs = []int32{
	32, // 0: bettor.v1alpha.User.created_at:type_name -> google.protobuf.Timestamp
	32, // 1: bettor.v1alpha.User.updated_at:type_name -> google.protobuf.Timestamp
	32, // 2: bettor.v1alpha.Market.created_at:type_name -> google.protobuf.Timestamp
	32, // 3: bettor.v1alpha.Market.updated_at:type_name -> google.protobuf.Timestamp
	32, // 4: bettor.v1alpha.Market.settled_at:type_name -> google.protobuf.Timestamp
	0,  // 5: bettor.v1alpha.Market.status:type_name -> bettor.v1alpha.Market.Status
	3,  // 6: bettor.v1alpha.Market.pool:type_name -> bettor.v1alpha.Pool
	4,  // 7: bettor.v1alpha.Pool.outcomes:type_name -> bettor.v1alpha.Outcome
	32, // 8: bettor.v1alpha.Bet.created_at:type_name -> google.protobuf.Timestamp
	32, // 9: bettor.v1alpha.Bet.updated_at:type_name -> google.protobuf.Timestamp
	32, // 10: bettor.v1alpha.Bet.settled_at:type_name -> google.protobuf.Timestamp
	1,  // 11: bettor.v1alpha.CreateUserRequest.user:type_name -> bettor.v1alpha.User
	1,  // 12: bettor.v1alpha.CreateUserResponse.user:type_name -> bettor.v1alpha.User
	1,  // 13: bettor.v1alpha.GetUserResponse.user:type_name -> bettor.v1alpha.User
	1,  // 14: bettor.v1alpha.GetUserByUsernameResponse.user:type_name -> bettor.v1alpha.User
	1,  // 15: bettor.v1alpha.ListUsersResponse.users:type_name -> bettor.v1alpha.User
	2,  // 16: bettor.v1alpha.CreateMarketRequest.market:type_name -> bettor.v1alpha.Market
	2,  // 17: bettor.v1alpha.CreateMarketResponse.market:type_name -> bettor.v1alpha.Market
	2,  // 18: bettor.v1alpha.GetMarketResponse.market:type_name -> bettor.v1alpha.Market
	0,  // 19: bettor.v1alpha.ListMarketsRequest.status:type_name -> bettor.v1alpha.Market.Status
	2,  // 20: bettor.v1alpha.ListMarketsResponse.markets:type_name -> bettor.v1alpha.Market
	2,  // 21: bettor.v1alpha.LockMarketResponse.market:type_name -> bettor.v1alpha.Market
	2,  // 22: bettor.v1alpha.SettleMarketResponse.market:type_name -> bettor.v1alpha.Market
	2,  // 23: bettor.v1alpha.CancelMarketResponse.market:type_name -> bettor.v1alpha.Market
	5,  // 24: bettor.v1alpha.CreateBetRequest.bet:type_name -> bettor.v1alpha.Bet
	5,  // 25: bettor.v1alpha.CreateBetResponse.bet:type_name -> bettor.v1alpha.Bet
	5,  // 26: bettor.v1alpha.GetBetResponse.bet:type_name -> bettor.v1alpha.Bet
	5,  // 27: bettor.v1alpha.ListBetsResponse.bets:type_name -> bettor.v1alpha.Bet
	6,  // 28: bettor.v1alpha.BettorService.CreateUser:input_type -> bettor.v1alpha.CreateUserRequest
	8,  // 29: bettor.v1alpha.BettorService.GetUser:input_type -> bettor.v1alpha.GetUserRequest
	10, // 30: bettor.v1alpha.BettorService.GetUserByUsername:input_type -> bettor.v1alpha.GetUserByUsernameRequest
	12, // 31: bettor.v1alpha.BettorService.ListUsers:input_type -> bettor.v1alpha.ListUsersRequest
	14, // 32: bettor.v1alpha.BettorService.CreateMarket:input_type -> bettor.v1alpha.CreateMarketRequest
	16, // 33: bettor.v1alpha.BettorService.GetMarket:input_type -> bettor.v1alpha.GetMarketRequest
	18, // 34: bettor.v1alpha.BettorService.ListMarkets:input_type -> bettor.v1alpha.ListMarketsRequest
	20, // 35: bettor.v1alpha.BettorService.LockMarket:input_type -> bettor.v1alpha.LockMarketRequest
	22, // 36: bettor.v1alpha.BettorService.SettleMarket:input_type -> bettor.v1alpha.SettleMarketRequest
	24, // 37: bettor.v1alpha.BettorService.CancelMarket:input_type -> bettor.v1alpha.CancelMarketRequest
	26, // 38: bettor.v1alpha.BettorService.CreateBet:input_type -> bettor.v1alpha.CreateBetRequest
	28, // 39: bettor.v1alpha.BettorService.GetBet:input_type -> bettor.v1alpha.GetBetRequest
	30, // 40: bettor.v1alpha.BettorService.ListBets:input_type -> bettor.v1alpha.ListBetsRequest
	7,  // 41: bettor.v1alpha.BettorService.CreateUser:output_type -> bettor.v1alpha.CreateUserResponse
	9,  // 42: bettor.v1alpha.BettorService.GetUser:output_type -> bettor.v1alpha.GetUserResponse
	11, // 43: bettor.v1alpha.BettorService.GetUserByUsername:output_type -> bettor.v1alpha.GetUserByUsernameResponse
	13, // 44: bettor.v1alpha.BettorService.ListUsers:output_type -> bettor.v1alpha.ListUsersResponse
	15, // 45: bettor.v1alpha.BettorService.CreateMarket:output_type -> bettor.v1alpha.CreateMarketResponse
	17, // 46: bettor.v1alpha.BettorService.GetMarket:output_type -> bettor.v1alpha.GetMarketResponse
	19, // 47: bettor.v1alpha.BettorService.ListMarkets:output_type -> bettor.v1alpha.ListMarketsResponse
	21, // 48: bettor.v1alpha.BettorService.LockMarket:output_type -> bettor.v1alpha.LockMarketResponse
	23, // 49: bettor.v1alpha.BettorService.SettleMarket:output_type -> bettor.v1alpha.SettleMarketResponse
	25, // 50: bettor.v1alpha.BettorService.CancelMarket:output_type -> bettor.v1alpha.CancelMarketResponse
	27, // 51: bettor.v1alpha.BettorService.CreateBet:output_type -> bettor.v1alpha.CreateBetResponse
	29, // 52: bettor.v1alpha.BettorService.GetBet:output_type -> bettor.v1alpha.GetBetResponse
	31, // 53: bettor.v1alpha.BettorService.ListBets:output_type -> bettor.v1alpha.ListBetsResponse
	41, // [41:54] is the sub-list for method output_type
	28, // [28:41] is the sub-list for method input_type
	28, // [28:28] is the sub-list for extension type_name
	28, // [28:28] is the sub-list for extension extendee
	0,  // [0:28] is the sub-list for field type_name
}

func init() { file_bettor_v1alpha_bettor_proto_init() }
func file_bettor_v1alpha_bettor_proto_init() {
	if File_bettor_v1alpha_bettor_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_bettor_v1alpha_bettor_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bettor_v1alpha_bettor_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Market); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bettor_v1alpha_bettor_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pool); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bettor_v1alpha_bettor_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Outcome); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bettor_v1alpha_bettor_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bettor_v1alpha_bettor_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bettor_v1alpha_bettor_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bettor_v1alpha_bettor_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bettor_v1alpha_bettor_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bettor_v1alpha_bettor_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserByUsernameRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bettor_v1alpha_bettor_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserByUsernameResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bettor_v1alpha_bettor_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListUsersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bettor_v1alpha_bettor_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListUsersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bettor_v1alpha_bettor_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateMarketRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bettor_v1alpha_bettor_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateMarketResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bettor_v1alpha_bettor_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMarketRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bettor_v1alpha_bettor_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMarketResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bettor_v1alpha_bettor_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListMarketsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bettor_v1alpha_bettor_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListMarketsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bettor_v1alpha_bettor_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LockMarketRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bettor_v1alpha_bettor_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LockMarketResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bettor_v1alpha_bettor_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SettleMarketRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bettor_v1alpha_bettor_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SettleMarketResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bettor_v1alpha_bettor_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelMarketRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bettor_v1alpha_bettor_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelMarketResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bettor_v1alpha_bettor_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateBetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bettor_v1alpha_bettor_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateBetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bettor_v1alpha_bettor_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bettor_v1alpha_bettor_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bettor_v1alpha_bettor_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBetsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bettor_v1alpha_bettor_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBetsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_bettor_v1alpha_bettor_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*Market_Pool)(nil),
	}
	file_bettor_v1alpha_bettor_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*Bet_Outcome)(nil),
	}
	file_bettor_v1alpha_bettor_proto_msgTypes[21].OneofWrappers = []interface{}{
		(*SettleMarketRequest_Winner)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_bettor_v1alpha_bettor_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   31,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_bettor_v1alpha_bettor_proto_goTypes,
		DependencyIndexes: file_bettor_v1alpha_bettor_proto_depIdxs,
		EnumInfos:         file_bettor_v1alpha_bettor_proto_enumTypes,
		MessageInfos:      file_bettor_v1alpha_bettor_proto_msgTypes,
	}.Build()
	File_bettor_v1alpha_bettor_proto = out.File
	file_bettor_v1alpha_bettor_proto_rawDesc = nil
	file_bettor_v1alpha_bettor_proto_goTypes = nil
	file_bettor_v1alpha_bettor_proto_depIdxs = nil
}
