// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: bettor/v1alpha/bettor.proto

package bettorv1alpha

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// define the regex for a UUID once up-front
var _bettor_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on User with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *User) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on User with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in UserMultiError, or nil if none found.
func (m *User) ValidateAll() error {
	return m.validate(true)
}

func (m *User) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetId()); err != nil {
		err = UserValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetCreatedAt() == nil {
		err := UserValidationError{
			field:  "CreatedAt",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetUpdatedAt() == nil {
		err := UserValidationError{
			field:  "UpdatedAt",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetUsername()); l < 1 || l > 128 {
		err := UserValidationError{
			field:  "Username",
			reason: "value length must be between 1 and 128 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_User_Username_Pattern.MatchString(m.GetUsername()) {
		err := UserValidationError{
			field:  "Username",
			reason: "value does not match regex pattern \"^[a-zA-Z0-9_]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Centipoints

	if len(errors) > 0 {
		return UserMultiError(errors)
	}

	return nil
}

func (m *User) _validateUuid(uuid string) error {
	if matched := _bettor_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// UserMultiError is an error wrapping multiple validation errors returned by
// User.ValidateAll() if the designated constraints aren't met.
type UserMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserMultiError) AllErrors() []error { return m }

// UserValidationError is the validation error returned by User.Validate if the
// designated constraints aren't met.
type UserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserValidationError) ErrorName() string { return "UserValidationError" }

// Error satisfies the builtin error interface
func (e UserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUser.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserValidationError{}

var _User_Username_Pattern = regexp.MustCompile("^[a-zA-Z0-9_]+$")

// Validate checks the field values on Market with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Market) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Market with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in MarketMultiError, or nil if none found.
func (m *Market) ValidateAll() error {
	return m.validate(true)
}

func (m *Market) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetId()); err != nil {
		err = MarketValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetCreatedAt() == nil {
		err := MarketValidationError{
			field:  "CreatedAt",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetUpdatedAt() == nil {
		err := MarketValidationError{
			field:  "UpdatedAt",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetLockAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MarketValidationError{
					field:  "LockAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MarketValidationError{
					field:  "LockAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLockAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MarketValidationError{
				field:  "LockAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSettledAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MarketValidationError{
					field:  "SettledAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MarketValidationError{
					field:  "SettledAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSettledAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MarketValidationError{
				field:  "SettledAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if l := utf8.RuneCountInString(m.GetTitle()); l < 1 || l > 1024 {
		err := MarketValidationError{
			field:  "Title",
			reason: "value length must be between 1 and 1024 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCreator()) < 1 {
		err := MarketValidationError{
			field:  "Creator",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _Market_Status_NotInLookup[m.GetStatus()]; ok {
		err := MarketValidationError{
			field:  "Status",
			reason: "value must not be in list [0]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := Market_Status_name[int32(m.GetStatus())]; !ok {
		err := MarketValidationError{
			field:  "Status",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	oneofTypePresent := false
	switch v := m.Type.(type) {
	case *Market_Pool:
		if v == nil {
			err := MarketValidationError{
				field:  "Type",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofTypePresent = true

		if all {
			switch v := interface{}(m.GetPool()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MarketValidationError{
						field:  "Pool",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MarketValidationError{
						field:  "Pool",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPool()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MarketValidationError{
					field:  "Pool",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}
	if !oneofTypePresent {
		err := MarketValidationError{
			field:  "Type",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MarketMultiError(errors)
	}

	return nil
}

func (m *Market) _validateUuid(uuid string) error {
	if matched := _bettor_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// MarketMultiError is an error wrapping multiple validation errors returned by
// Market.ValidateAll() if the designated constraints aren't met.
type MarketMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MarketMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MarketMultiError) AllErrors() []error { return m }

// MarketValidationError is the validation error returned by Market.Validate if
// the designated constraints aren't met.
type MarketValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MarketValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MarketValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MarketValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MarketValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MarketValidationError) ErrorName() string { return "MarketValidationError" }

// Error satisfies the builtin error interface
func (e MarketValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMarket.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MarketValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MarketValidationError{}

var _Market_Status_NotInLookup = map[Market_Status]struct{}{
	0: {},
}

// Validate checks the field values on Pool with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Pool) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Pool with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in PoolMultiError, or nil if none found.
func (m *Pool) ValidateAll() error {
	return m.validate(true)
}

func (m *Pool) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetOutcomes()) < 2 {
		err := PoolValidationError{
			field:  "Outcomes",
			reason: "value must contain at least 2 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetOutcomes() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PoolValidationError{
						field:  fmt.Sprintf("Outcomes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PoolValidationError{
						field:  fmt.Sprintf("Outcomes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PoolValidationError{
					field:  fmt.Sprintf("Outcomes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for WinnerId

	if len(errors) > 0 {
		return PoolMultiError(errors)
	}

	return nil
}

// PoolMultiError is an error wrapping multiple validation errors returned by
// Pool.ValidateAll() if the designated constraints aren't met.
type PoolMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PoolMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PoolMultiError) AllErrors() []error { return m }

// PoolValidationError is the validation error returned by Pool.Validate if the
// designated constraints aren't met.
type PoolValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PoolValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PoolValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PoolValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PoolValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PoolValidationError) ErrorName() string { return "PoolValidationError" }

// Error satisfies the builtin error interface
func (e PoolValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPool.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PoolValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PoolValidationError{}

// Validate checks the field values on Outcome with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Outcome) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Outcome with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in OutcomeMultiError, or nil if none found.
func (m *Outcome) ValidateAll() error {
	return m.validate(true)
}

func (m *Outcome) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetId()); err != nil {
		err = OutcomeValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetTitle()); l < 1 || l > 1024 {
		err := OutcomeValidationError{
			field:  "Title",
			reason: "value length must be between 1 and 1024 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Centipoints

	// no validation rules for UserCount

	if len(errors) > 0 {
		return OutcomeMultiError(errors)
	}

	return nil
}

func (m *Outcome) _validateUuid(uuid string) error {
	if matched := _bettor_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// OutcomeMultiError is an error wrapping multiple validation errors returned
// by Outcome.ValidateAll() if the designated constraints aren't met.
type OutcomeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OutcomeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OutcomeMultiError) AllErrors() []error { return m }

// OutcomeValidationError is the validation error returned by Outcome.Validate
// if the designated constraints aren't met.
type OutcomeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OutcomeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OutcomeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OutcomeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OutcomeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OutcomeValidationError) ErrorName() string { return "OutcomeValidationError" }

// Error satisfies the builtin error interface
func (e OutcomeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOutcome.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OutcomeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OutcomeValidationError{}

// Validate checks the field values on Bet with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Bet) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Bet with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in BetMultiError, or nil if none found.
func (m *Bet) ValidateAll() error {
	return m.validate(true)
}

func (m *Bet) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetId()); err != nil {
		err = BetValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetCreatedAt() == nil {
		err := BetValidationError{
			field:  "CreatedAt",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetUpdatedAt() == nil {
		err := BetValidationError{
			field:  "UpdatedAt",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetSettledAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BetValidationError{
					field:  "SettledAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BetValidationError{
					field:  "SettledAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSettledAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BetValidationError{
				field:  "SettledAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if utf8.RuneCountInString(m.GetUserId()) < 1 {
		err := BetValidationError{
			field:  "UserId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetMarketId()) < 1 {
		err := BetValidationError{
			field:  "MarketId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Centipoints

	// no validation rules for SettledCentipoints

	oneofTypePresent := false
	switch v := m.Type.(type) {
	case *Bet_OutcomeId:
		if v == nil {
			err := BetValidationError{
				field:  "Type",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofTypePresent = true
		// no validation rules for OutcomeId
	default:
		_ = v // ensures v is used
	}
	if !oneofTypePresent {
		err := BetValidationError{
			field:  "Type",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return BetMultiError(errors)
	}

	return nil
}

func (m *Bet) _validateUuid(uuid string) error {
	if matched := _bettor_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// BetMultiError is an error wrapping multiple validation errors returned by
// Bet.ValidateAll() if the designated constraints aren't met.
type BetMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BetMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BetMultiError) AllErrors() []error { return m }

// BetValidationError is the validation error returned by Bet.Validate if the
// designated constraints aren't met.
type BetValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BetValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BetValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BetValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BetValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BetValidationError) ErrorName() string { return "BetValidationError" }

// Error satisfies the builtin error interface
func (e BetValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBet.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BetValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BetValidationError{}

// Validate checks the field values on CreateUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateUserRequestMultiError, or nil if none found.
func (m *CreateUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateUserRequestValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateUserRequestValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateUserRequestValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateUserRequestMultiError(errors)
	}

	return nil
}

// CreateUserRequestMultiError is an error wrapping multiple validation errors
// returned by CreateUserRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateUserRequestMultiError) AllErrors() []error { return m }

// CreateUserRequestValidationError is the validation error returned by
// CreateUserRequest.Validate if the designated constraints aren't met.
type CreateUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateUserRequestValidationError) ErrorName() string {
	return "CreateUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateUserRequestValidationError{}

// Validate checks the field values on CreateUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateUserResponseMultiError, or nil if none found.
func (m *CreateUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateUserResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateUserResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateUserResponseValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateUserResponseMultiError(errors)
	}

	return nil
}

// CreateUserResponseMultiError is an error wrapping multiple validation errors
// returned by CreateUserResponse.ValidateAll() if the designated constraints
// aren't met.
type CreateUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateUserResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateUserResponseMultiError) AllErrors() []error { return m }

// CreateUserResponseValidationError is the validation error returned by
// CreateUserResponse.Validate if the designated constraints aren't met.
type CreateUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateUserResponseValidationError) ErrorName() string {
	return "CreateUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateUserResponseValidationError{}

// Validate checks the field values on GetUserRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetUserRequestMultiError,
// or nil if none found.
func (m *GetUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserId()) < 1 {
		err := GetUserRequestValidationError{
			field:  "UserId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetUserRequestMultiError(errors)
	}

	return nil
}

// GetUserRequestMultiError is an error wrapping multiple validation errors
// returned by GetUserRequest.ValidateAll() if the designated constraints
// aren't met.
type GetUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserRequestMultiError) AllErrors() []error { return m }

// GetUserRequestValidationError is the validation error returned by
// GetUserRequest.Validate if the designated constraints aren't met.
type GetUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserRequestValidationError) ErrorName() string { return "GetUserRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserRequestValidationError{}

// Validate checks the field values on GetUserResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserResponseMultiError, or nil if none found.
func (m *GetUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetUserResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetUserResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetUserResponseValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetUserResponseMultiError(errors)
	}

	return nil
}

// GetUserResponseMultiError is an error wrapping multiple validation errors
// returned by GetUserResponse.ValidateAll() if the designated constraints
// aren't met.
type GetUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserResponseMultiError) AllErrors() []error { return m }

// GetUserResponseValidationError is the validation error returned by
// GetUserResponse.Validate if the designated constraints aren't met.
type GetUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserResponseValidationError) ErrorName() string { return "GetUserResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserResponseValidationError{}

// Validate checks the field values on CreateMarketRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateMarketRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateMarketRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateMarketRequestMultiError, or nil if none found.
func (m *CreateMarketRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateMarketRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMarket()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateMarketRequestValidationError{
					field:  "Market",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateMarketRequestValidationError{
					field:  "Market",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMarket()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateMarketRequestValidationError{
				field:  "Market",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateMarketRequestMultiError(errors)
	}

	return nil
}

// CreateMarketRequestMultiError is an error wrapping multiple validation
// errors returned by CreateMarketRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateMarketRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateMarketRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateMarketRequestMultiError) AllErrors() []error { return m }

// CreateMarketRequestValidationError is the validation error returned by
// CreateMarketRequest.Validate if the designated constraints aren't met.
type CreateMarketRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateMarketRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateMarketRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateMarketRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateMarketRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateMarketRequestValidationError) ErrorName() string {
	return "CreateMarketRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateMarketRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateMarketRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateMarketRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateMarketRequestValidationError{}

// Validate checks the field values on CreateMarketResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateMarketResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateMarketResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateMarketResponseMultiError, or nil if none found.
func (m *CreateMarketResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateMarketResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMarket()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateMarketResponseValidationError{
					field:  "Market",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateMarketResponseValidationError{
					field:  "Market",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMarket()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateMarketResponseValidationError{
				field:  "Market",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateMarketResponseMultiError(errors)
	}

	return nil
}

// CreateMarketResponseMultiError is an error wrapping multiple validation
// errors returned by CreateMarketResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateMarketResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateMarketResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateMarketResponseMultiError) AllErrors() []error { return m }

// CreateMarketResponseValidationError is the validation error returned by
// CreateMarketResponse.Validate if the designated constraints aren't met.
type CreateMarketResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateMarketResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateMarketResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateMarketResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateMarketResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateMarketResponseValidationError) ErrorName() string {
	return "CreateMarketResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateMarketResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateMarketResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateMarketResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateMarketResponseValidationError{}

// Validate checks the field values on GetMarketRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetMarketRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMarketRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetMarketRequestMultiError, or nil if none found.
func (m *GetMarketRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMarketRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetMarketId()) < 1 {
		err := GetMarketRequestValidationError{
			field:  "MarketId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetMarketRequestMultiError(errors)
	}

	return nil
}

// GetMarketRequestMultiError is an error wrapping multiple validation errors
// returned by GetMarketRequest.ValidateAll() if the designated constraints
// aren't met.
type GetMarketRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMarketRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMarketRequestMultiError) AllErrors() []error { return m }

// GetMarketRequestValidationError is the validation error returned by
// GetMarketRequest.Validate if the designated constraints aren't met.
type GetMarketRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMarketRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMarketRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMarketRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMarketRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMarketRequestValidationError) ErrorName() string { return "GetMarketRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetMarketRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMarketRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMarketRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMarketRequestValidationError{}

// Validate checks the field values on GetMarketResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetMarketResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMarketResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetMarketResponseMultiError, or nil if none found.
func (m *GetMarketResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMarketResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMarket()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetMarketResponseValidationError{
					field:  "Market",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetMarketResponseValidationError{
					field:  "Market",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMarket()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetMarketResponseValidationError{
				field:  "Market",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetMarketResponseMultiError(errors)
	}

	return nil
}

// GetMarketResponseMultiError is an error wrapping multiple validation errors
// returned by GetMarketResponse.ValidateAll() if the designated constraints
// aren't met.
type GetMarketResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMarketResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMarketResponseMultiError) AllErrors() []error { return m }

// GetMarketResponseValidationError is the validation error returned by
// GetMarketResponse.Validate if the designated constraints aren't met.
type GetMarketResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMarketResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMarketResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMarketResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMarketResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMarketResponseValidationError) ErrorName() string {
	return "GetMarketResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetMarketResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMarketResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMarketResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMarketResponseValidationError{}

// Validate checks the field values on LockMarketRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *LockMarketRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LockMarketRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LockMarketRequestMultiError, or nil if none found.
func (m *LockMarketRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LockMarketRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetMarketId()) < 1 {
		err := LockMarketRequestValidationError{
			field:  "MarketId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return LockMarketRequestMultiError(errors)
	}

	return nil
}

// LockMarketRequestMultiError is an error wrapping multiple validation errors
// returned by LockMarketRequest.ValidateAll() if the designated constraints
// aren't met.
type LockMarketRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LockMarketRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LockMarketRequestMultiError) AllErrors() []error { return m }

// LockMarketRequestValidationError is the validation error returned by
// LockMarketRequest.Validate if the designated constraints aren't met.
type LockMarketRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LockMarketRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LockMarketRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LockMarketRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LockMarketRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LockMarketRequestValidationError) ErrorName() string {
	return "LockMarketRequestValidationError"
}

// Error satisfies the builtin error interface
func (e LockMarketRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLockMarketRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LockMarketRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LockMarketRequestValidationError{}

// Validate checks the field values on LockMarketResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LockMarketResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LockMarketResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LockMarketResponseMultiError, or nil if none found.
func (m *LockMarketResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *LockMarketResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMarket()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LockMarketResponseValidationError{
					field:  "Market",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LockMarketResponseValidationError{
					field:  "Market",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMarket()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LockMarketResponseValidationError{
				field:  "Market",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return LockMarketResponseMultiError(errors)
	}

	return nil
}

// LockMarketResponseMultiError is an error wrapping multiple validation errors
// returned by LockMarketResponse.ValidateAll() if the designated constraints
// aren't met.
type LockMarketResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LockMarketResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LockMarketResponseMultiError) AllErrors() []error { return m }

// LockMarketResponseValidationError is the validation error returned by
// LockMarketResponse.Validate if the designated constraints aren't met.
type LockMarketResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LockMarketResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LockMarketResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LockMarketResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LockMarketResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LockMarketResponseValidationError) ErrorName() string {
	return "LockMarketResponseValidationError"
}

// Error satisfies the builtin error interface
func (e LockMarketResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLockMarketResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LockMarketResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LockMarketResponseValidationError{}

// Validate checks the field values on SettleMarketRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SettleMarketRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SettleMarketRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SettleMarketRequestMultiError, or nil if none found.
func (m *SettleMarketRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SettleMarketRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetMarketId()) < 1 {
		err := SettleMarketRequestValidationError{
			field:  "MarketId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for WinnerId

	if len(errors) > 0 {
		return SettleMarketRequestMultiError(errors)
	}

	return nil
}

// SettleMarketRequestMultiError is an error wrapping multiple validation
// errors returned by SettleMarketRequest.ValidateAll() if the designated
// constraints aren't met.
type SettleMarketRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SettleMarketRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SettleMarketRequestMultiError) AllErrors() []error { return m }

// SettleMarketRequestValidationError is the validation error returned by
// SettleMarketRequest.Validate if the designated constraints aren't met.
type SettleMarketRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SettleMarketRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SettleMarketRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SettleMarketRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SettleMarketRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SettleMarketRequestValidationError) ErrorName() string {
	return "SettleMarketRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SettleMarketRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSettleMarketRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SettleMarketRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SettleMarketRequestValidationError{}

// Validate checks the field values on SettleMarketResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SettleMarketResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SettleMarketResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SettleMarketResponseMultiError, or nil if none found.
func (m *SettleMarketResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SettleMarketResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMarket()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SettleMarketResponseValidationError{
					field:  "Market",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SettleMarketResponseValidationError{
					field:  "Market",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMarket()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SettleMarketResponseValidationError{
				field:  "Market",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SettleMarketResponseMultiError(errors)
	}

	return nil
}

// SettleMarketResponseMultiError is an error wrapping multiple validation
// errors returned by SettleMarketResponse.ValidateAll() if the designated
// constraints aren't met.
type SettleMarketResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SettleMarketResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SettleMarketResponseMultiError) AllErrors() []error { return m }

// SettleMarketResponseValidationError is the validation error returned by
// SettleMarketResponse.Validate if the designated constraints aren't met.
type SettleMarketResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SettleMarketResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SettleMarketResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SettleMarketResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SettleMarketResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SettleMarketResponseValidationError) ErrorName() string {
	return "SettleMarketResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SettleMarketResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSettleMarketResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SettleMarketResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SettleMarketResponseValidationError{}

// Validate checks the field values on CreateBetRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateBetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateBetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateBetRequestMultiError, or nil if none found.
func (m *CreateBetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateBetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBet()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateBetRequestValidationError{
					field:  "Bet",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateBetRequestValidationError{
					field:  "Bet",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBet()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateBetRequestValidationError{
				field:  "Bet",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateBetRequestMultiError(errors)
	}

	return nil
}

// CreateBetRequestMultiError is an error wrapping multiple validation errors
// returned by CreateBetRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateBetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateBetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateBetRequestMultiError) AllErrors() []error { return m }

// CreateBetRequestValidationError is the validation error returned by
// CreateBetRequest.Validate if the designated constraints aren't met.
type CreateBetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateBetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateBetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateBetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateBetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateBetRequestValidationError) ErrorName() string { return "CreateBetRequestValidationError" }

// Error satisfies the builtin error interface
func (e CreateBetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateBetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateBetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateBetRequestValidationError{}

// Validate checks the field values on CreateBetResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateBetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateBetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateBetResponseMultiError, or nil if none found.
func (m *CreateBetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateBetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBet()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateBetResponseValidationError{
					field:  "Bet",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateBetResponseValidationError{
					field:  "Bet",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBet()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateBetResponseValidationError{
				field:  "Bet",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateBetResponseMultiError(errors)
	}

	return nil
}

// CreateBetResponseMultiError is an error wrapping multiple validation errors
// returned by CreateBetResponse.ValidateAll() if the designated constraints
// aren't met.
type CreateBetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateBetResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateBetResponseMultiError) AllErrors() []error { return m }

// CreateBetResponseValidationError is the validation error returned by
// CreateBetResponse.Validate if the designated constraints aren't met.
type CreateBetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateBetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateBetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateBetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateBetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateBetResponseValidationError) ErrorName() string {
	return "CreateBetResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateBetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateBetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateBetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateBetResponseValidationError{}
