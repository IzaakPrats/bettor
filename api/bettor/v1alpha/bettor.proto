syntax = "proto3";

package bettor.v1alpha;

import "google/type/datetime.proto";

// User identifies a user and their properties.
message User {
  string id = 1;
  google.type.DateTime created_at = 2;
  google.type.DateTime updated_at = 3;
  /* @exclude NOTE: is double precision okay? use an integer centipoint and disallow long fractional parts? */
  double points = 4;
}

message Market {
  string id = 1;
  google.type.DateTime created_at = 2;
  google.type.DateTime updated_at = 3;
  google.type.DateTime lock_at = 4;
  google.type.DateTime settled_at = 5;
  string title = 6;
  string creator = 7;
  Status status = 8;
  oneof type {
    Pool pool = 9;
  }

  enum Status {
    STATUS_UNSPECIFIED = 0;
    STATUS_ACTIVE = 1;
    STATUS_BETS_LOCKED = 2;
    STATUS_SETTLED = 3;
  }
}

message Pool {
  repeated Outcome outcomes = 1;
  string winner_id = 2;
}

message Outcome {
  string id = 1;
  string title = 2;
  double points = 3;
  int32 user_count = 4;
}

message Bet {
  string id = 1;
  google.type.DateTime created_at = 2;
  google.type.DateTime updated_at = 3;
  google.type.DateTime settled_at = 4;
  string user_id = 5;
  string betting_event_id = 6;
  double points = 7;
  double settled_points = 8;
  oneof type {
    string outcome_id = 9;
  }
}

// API requests and responses.

message CreateUserRequest {
  User user = 1;
}

message CreateUserResponse {
  User user = 1;
}

message GetUserRequest {
  string user_id = 1;
}

message GetUserResponse {
  User user = 1;
}

message CreateMarketRequest {
  Market market = 1;
}

message CreateMarketResponse {
  Market market = 1;
}

message GetMarketRequest {
  string market_id = 1;
}

message GetMarketResponse {
  Market market = 1;
}

message LockMarketRequest {
  string market_id = 1;
}

message LockMarketResponse {
  Market market = 1;
}

message SettleMarketRequest {
  string market_id = 1;
  string winner_id = 2;
}

message SettleMarketResponse {
  Market market = 1;
}

message PlaceBetRequest {
  string market_id = 1;
  Bet bet = 2;
}

message PlaceBetResponse {
  Bet bet = 1;
}

// BettorService is a service for bets and predictions.
service BettorService {
  // CreateUser creates a new user.
  rpc CreateUser(CreateUserRequest) returns (CreateUserResponse) {}
  // GetUser returns a user by ID.
  rpc GetUser(GetUserRequest) returns (GetUserResponse) {}

  rpc CreateMarket(CreateMarketRequest) returns (CreateMarketResponse) {}
  rpc GetMarket(GetMarketRequest) returns (GetMarketResponse) {}
  rpc LockMarket(LockMarketRequest) returns (LockMarketResponse) {}
  rpc SettleMarket(SettleMarketRequest) returns (SettleMarketResponse) {}

  rpc PlaceBet(PlaceBetRequest) returns (PlaceBetResponse) {}
}
